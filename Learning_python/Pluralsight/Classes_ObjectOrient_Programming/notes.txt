Object Oriented Programming

*Using Packages that rely on OOP
_________________
| 0 0 0          |
-----------------  
|                |
|   Main App     |
|   Interface    |
|                |
__________________ 

____________________
| 0 0 0            |
--------------------  
|                  |
|  Want to upgrade |
|   the app?       |
|                  |
____________________

from some_gui_package import Window, Button

win1 = Window("Main app interface)
win2 = Window("Want to update the app?)

if btn.clicked:
    win2.close_window()



*Overview of Special Dunder Methods
- Double underscore
- Use to be called indirectly through another piece of close_window
- __init__ , __str__, __dict__, __repr__
- Example __add__
    - employee3 = employee2 + employee1
    - Python will not know how to add these together by default. You will have to define it inside of the class
        - def __ad__(self, other_employee):
            return Employee("New", self.age + other_employee.age, "dev", 2000)

* Managing Attribute Access
setter: Do set something before the valuse gets assigned
getter: For consistency, returns the valus itself

Getter gets the valuse
Setter updates the attribute with a new value
